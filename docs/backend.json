{"entities": {"User": {"$schema": "http://json-schema.org/draft-07/schema#", "title": "User", "type": "object", "description": "Represents a user of the fraud detection platform.", "properties": {"id": {"type": "string", "description": "Unique identifier for the user."}, "email": {"type": "string", "description": "Email address of the user.", "format": "email"}, "firstName": {"type": "string", "description": "First name of the user."}, "lastName": {"type": "string", "description": "Last name of the user."}}, "required": ["id", "email", "firstName", "lastName"]}, "Transaction": {"$schema": "http://json-schema.org/draft-07/schema#", "title": "Transaction", "type": "object", "description": "Represents a financial transaction.", "properties": {"id": {"type": "string", "description": "Unique identifier for the transaction."}, "userId": {"type": "string", "description": "Reference to User. (Relationship: User 1:N Transaction)"}, "amount": {"type": "number", "description": "Amount of the transaction."}, "timestamp": {"type": "string", "description": "Timestamp of the transaction.", "format": "date-time"}, "location": {"type": "string", "description": "Location of the transaction. (e.g., JSON string with lat/long)"}, "merchantType": {"type": "string", "description": "Type of merchant (e.g., 'online', 'retail')."}, "riskScore": {"type": "number", "description": "Risk score assigned to the transaction by the AI model."}, "paymentMethod": {"type": "string", "description": "Payment method used for the transaction (e.g., 'credit_card', 'paypal')."}}, "required": ["id", "userId", "amount", "timestamp", "location", "merchantType", "riskScore", "paymentMethod"]}, "FraudAlert": {"$schema": "http://json-schema.org/draft-07/schema#", "title": "FraudAlert", "type": "object", "description": "Represents an alert generated for a potentially fraudulent transaction.", "properties": {"id": {"type": "string", "description": "Unique identifier for the fraud alert."}, "transactionId": {"type": "string", "description": "Reference to Transaction. (Relationship: Transaction 1:N FraudAlert)"}, "riskLevel": {"type": "string", "description": "Risk level associated with the alert (e.g., 'high', 'medium', 'low')."}, "description": {"type": "string", "description": "Description of the potential fraud."}, "timestamp": {"type": "string", "description": "Timestamp when the alert was generated.", "format": "date-time"}}, "required": ["id", "transactionId", "riskLevel", "description", "timestamp"]}}, "auth": {"providers": ["password"]}, "firestore": {"structure": [{"path": "/users/{userId}", "definition": {"entityName": "User", "schema": {"$ref": "#/backend/entities/User"}, "description": "Stores user profiles. Path-based ownership ensures only the user can access their profile.", "params": [{"name": "userId", "description": "The unique identifier for the user."}]}}, {"path": "/users/{userId}/transactions/{transactionId}", "definition": {"entityName": "Transaction", "schema": {"$ref": "#/backend/entities/Transaction"}, "description": "Stores transactions associated with a user. Path-based ownership ensures only the user can access their transactions.", "params": [{"name": "userId", "description": "The unique identifier for the user."}, {"name": "transactionId", "description": "The unique identifier for the transaction."}]}}, {"path": "/users/{userId}/transactions/{transactionId}/fraudAlerts/{fraudAlertId}", "definition": {"entityName": "FraudAlert", "schema": {"$ref": "#/backend/entities/FraudAlert"}, "description": "Stores fraud alerts associated with a transaction. Path-based ownership ensures only the user can access alerts for their transactions.", "params": [{"name": "userId", "description": "The unique identifier for the user."}, {"name": "transactionId", "description": "The unique identifier for the transaction."}, {"name": "fraudAlertId", "description": "The unique identifier for the fraud alert."}]}}], "reasoning": "The Firestore structure prioritizes user-owned data with path-based ownership to ensure simplicity and security. The `/users/{userId}/transactions/{transactionId}` and `/users/{userId}/transactions/{transactionId}/fraudAlerts/{fraudAlertId}` paths follow this pattern. This allows security rules to easily enforce that only the user can access their own transactions and alerts, eliminating the need for complex `get()` calls and ensuring Authorization Independence.  This enables atomic operations on transactions and alerts within a user's context. Because Firebase Auth is only used for authentication, it does not store user roles or permissions.\n\nQAPs are supported because listing transactions and fraud alerts are scoped to a specific user's path (e.g., `/users/{userId}/transactions`). This prevents unauthorized listing of all transactions across all users. The structure also enforces invariants related to ownership by restricting write access based on the `userId` in the path, ensuring that transactions are always associated with the correct user."}}